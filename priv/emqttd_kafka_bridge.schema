%% emqttd_kafka_bride config mapping
{mapping, "emqttd.kafka.bridge.broker ", "emqttd_kafka_bridge.bootstrap_broker", [
  {datatype, string},
  {default, "172.19.16.67:19092, 172.19.16.68:19092, 172.19.16.69:19092"}
]}.

{mapping, "emqttd.kafka.bridge.partition", "emqttd_kafka_bridge.kafka_producer_partition", [
  {datatype, integer},
  {default, 10}
]}.

{mapping, "emqttd.kafka.bridge.client.$option ", "emqttd_kafka_bridge.client_config", [
  {datatype, [integer, string, flag]},
]}.

{mapping, "emqttd.kafka.bridge.topic.$match", "emqttd_kafka_bridge.kafka_producer_topic", [
  {datatype, string}
]}.

{translation, "emqttd_kafka_bridge.bootstrap_broker", fun(Conf) ->
  Broker = cuttlefish:conf_get("emqttd.kafka.bridge.broker", Conf),
  BrokerList = string:split(Broker, ",", all),
	lists:map(fun(X)-> 
	  [Host, Port] = string:tokens(X, ":"),
	  {string:trim(Host), list_to_integer(string:trim(Port))}   
	end, BrokerList).
end}.

{translation, "emqttd_kafka_bridge.client_config", fun(Conf) ->
  Options = cuttlefish_variable:filter_by_prefix("emqttd.kafka.bridge.client", Conf),
  [ {list_to_atom(Option), _}|| {Option, _} <- Options]
end}.

{translation, "emqttd_kafka_bridge.kafka_producer_topic", fun(Conf) ->
  Prefixs = cuttlefish_variable:filter_by_prefix("emqttd.kafka.bridge.topic", Conf),
  [ {Prefix, list_to_binary(Value)} || {Prefix, Value} <- Topics]
end}.